# Generated by Django 3.0.5 on 2020-04-18 16:01

import cropperjs.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import markdownx.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MainSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_skill', models.CharField(blank=True, choices=[('ANDROID_DEVELOPER', 'Android Developer'), ('DESIGNER', 'Designer'), ('IOS_DEVELOPER', 'IOS Developer'), ('JAVA_DEVELOPER', 'Java Developer'), ('PHP_DEVELOPER', 'PHP Developer'), ('PYTHON_DEVELOPER', 'Python Developer'), ('RAILS_DEVELOPER', 'Rails Developer'), ('WORDPRESS_DEVELOPER', 'Wordpress Developer'), ('OTHER', 'Other')], max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='OtherSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('other_skill', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='UserProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(blank=True, max_length=255)),
                ('url', models.URLField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_projects', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(default='', max_length=255)),
                ('avatar', cropperjs.models.CropperImageField(default='avatars/sample.png', upload_to='avatars/')),
                ('bio', markdownx.models.MarkdownxField(default='')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(allow_unicode=True, unique=True)),
                ('main_skills', models.ManyToManyField(related_name='mainskill', to='accounts.MainSkill')),
                ('other_skills', models.ManyToManyField(related_name='otherskill', to='accounts.OtherSkill')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
